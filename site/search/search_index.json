{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sommelier DB Open source DB with public-key searchable encryption: discerning encrypted data without knowing the contents, just like a sommelier! Overview of Sommelier DB Sommelier DB is an open source DB library combining SQLite and public-key searchable encryption (PKSE) . In addition to existing SQLite features, it provides functions for PKSE as below. A new SQL function to test a keyword encryption of the PKSE scheme. C and Rust functions to generate a keyword encryption and a trapdoor of the PKSE scheme. The above functions allow users to have the database (DB) server search for appropriate records in the DB without revealing their search criteria . For more detail about Sommelier DB, see here . Overview of Sommelier Drive Sommelier Drive is a remote file system developed as the first application of Sommelier DB. Its stored files and their file paths are encrypted with the public key of the legitimate user who has read permission to the file. Therefore, other users who do not have the read permission or the administrator of the server hosting the file system cannot know what files exist and where they are located . Furthermore, the legitimate users can generate trapdoors using the user's private key, allowing the server to search for the appropriate file without revealing the search criteria. Its detailed specifications are available here . Disclaimer DO NOT USE THIS LIBRARY IN PRODUCTION . At this point, this is under development. It has known and unknown bugs and security flaws. Quick Links Sommelier DB implementation Server implementation of Sommelier Drive Client implementation of Sommelier Drive Glibc client implementation of Sommelier Drive PKSE implementation written in Rust","title":"Home"},{"location":"#sommelier-db","text":"Open source DB with public-key searchable encryption: discerning encrypted data without knowing the contents, just like a sommelier!","title":"Sommelier DB"},{"location":"#overview-of-sommelier-db","text":"Sommelier DB is an open source DB library combining SQLite and public-key searchable encryption (PKSE) . In addition to existing SQLite features, it provides functions for PKSE as below. A new SQL function to test a keyword encryption of the PKSE scheme. C and Rust functions to generate a keyword encryption and a trapdoor of the PKSE scheme. The above functions allow users to have the database (DB) server search for appropriate records in the DB without revealing their search criteria . For more detail about Sommelier DB, see here .","title":"Overview of Sommelier DB"},{"location":"#overview-of-sommelier-drive","text":"Sommelier Drive is a remote file system developed as the first application of Sommelier DB. Its stored files and their file paths are encrypted with the public key of the legitimate user who has read permission to the file. Therefore, other users who do not have the read permission or the administrator of the server hosting the file system cannot know what files exist and where they are located . Furthermore, the legitimate users can generate trapdoors using the user's private key, allowing the server to search for the appropriate file without revealing the search criteria. Its detailed specifications are available here .","title":"Overview of Sommelier Drive"},{"location":"#disclaimer","text":"DO NOT USE THIS LIBRARY IN PRODUCTION . At this point, this is under development. It has known and unknown bugs and security flaws.","title":"Disclaimer"},{"location":"#quick-links","text":"Sommelier DB implementation Server implementation of Sommelier Drive Client implementation of Sommelier Drive Glibc client implementation of Sommelier Drive PKSE implementation written in Rust","title":"Quick Links"},{"location":"blog/pkse/","text":"Author: Sora Suegami In this post, I describe how we implemented our new PKSE library . As described in its README.md, our library provides Public-key encryption with conjunctive and disjunctive keyword search (PECDK) [1] as an underlying scheme. The PECDK supports conjunction and disjunction of multiple keywords as search criteria, which is rather expressive in the research field of public-key searchable encryption (PKSE). However, to provide the same level of functionality as SQL, more complex search criteria need to be addressed. We filled this gap without implementing new PKSE schemes by devising how to construct the keywords to be encrypted in the PECDK scheme. Specifically, our library supports prefix and range search. The former encrypts a string and retrieves the encryption whose string has the specified prefix, and the latter encrypts an unsigned integer and retrieves the encryption whose integer is within the specified range. In the following, I explain those background designs and implementations. Prefix search In the prefix search, a string is decomposed into bytes, and a pair of each byte and its index forms a single keyword. For example, a string \"abcde\" will be keywords [(0,\"a\"), (1, \"b\"), (2,\"c\"), (3,\"d\"), (4, \"e\")] . In our library, this keyword construction is implemented in Rust as below. 1 2 3 4 5 6 7 8 9 10 11 let mut keywords = bytes .into_iter() .enumerate() .map(|(idx, byte)| { concat_multi_bytes(vec![ region_name.as_bytes(), &idx.to_be_bytes(), &vec![1u8, *byte], ]) }) .collect::<Vec<Vec<u8>>>(); The variable idx and byte represent the index and the byte, respectively. The region_name is a fixed, application-specific string used to distinguish the same string encrypted for different applications. The byte 1 is also necessary to distinguish an empty keyword, namely all-zero bytes. The function concat_multi_bytes concats all of the given bytes. In this way, with minor exceptions, our implementation is consistent with the above description. The trapdoor for the prefix search is for a conjunction of keywords derived from a prefix string. For instance, the trapdoor for the prefix \"abc\" corresponds to the conjunction of keywords [(0,\"a\"), (1, \"b\"), (2,\"c\")] . Since the keywords of string with that prefix should include the same keywords, the trapdoor can match the appropriate string encryptions with the PECDK scheme. Range search The range search is more complex than the prefix search, but more interesting! Our first idea for the range search is to divide the entire range of integers into certain smaller ranges and encrypt the range containing the\u3000target integer as keyword. As an example, consider an integer \\(x\\) within the range \\([0, 50)\\) . We first divide that entire range into ranges of size 10, i.e., \\([0,10), [10,20), [20,30), [30,40), [40,50)\\) . The encryption of \\(x=15\\) will be the encryption of the keyword \\([10,20)\\) as \\(x \\in [10, 20)\\) holds. The trapdoor for the itenger within the range \\([10,30)\\) will correspond to a disjunction of keywords \\([10,20), [20,30)\\) . Although the above approach is easy to implement, it has two downsides. It cannot cover an exponentially-large range. It cannot generate a trapdoor for a range whose size is not a multiple of the size of the divided range (e.g., 10 in the above example). To overcome them, we adopt an approach proposed in [2]. In a nutshell, it constructs a binary tree corresponding to the entire range and encrypts a node of each height as a keyword. For example, for an 4-bit integer \\(x\\) , the following binary tree is considered. The encryption of \\(9=1001_2\\) will be for the keywords \\(((1, 1_2), (2, 10_2), (3, 100_2), (4, 1001_1))\\) . Notably, the number of keywords to be encrypted is only \\(t\\) for the exponentially-large range \\([0,2^t)\\) in this scheme! The trapdoor is generated for the disjunction of the nodes that cover all leafs within the specified range. In the above example, nodes \\((0101_2, 011_2, 10_2, 110_2)\\) covers all leafs within the range \\([0101_2, 1101_2]\\) , i.e., \\([5, 13]\\) . It implies that the integer within that range should have at least one of the nodes \\((0101_2, 011_2, 10_2, 110_2)\\) . Therefore, the disjunction of these nodes matches the appropriate integer encryption. Furthermore, there are no restrictions as in our initial idea regarding the position and size of the range to be specified. However, the minimum set of cover nodes is not sufficient to protect the privacy of search criteria because its size is not consistent for two different ranges with the same size. (E.g., the range \\([0,8]\\) has the same size with \\([5, 13]\\) , but its minimum set of cover nodes is just two nodes, namely \\((0_2, 1000_2)\\) !) The author of [2] solves this problem by considering a \"minimal universal cover [2]\", which is \"a cover with a number of nodes and depths that is the same for any two ranges of the same size [2]\". Such cover nodes leaks only the size of the specified range. Our implementation produces it following the procedures in Appendix A of [2], as below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 fn get_canonical_cover_nodes(min: u64, max: u64, bit_size: usize) -> HashSet<Vec<bool>> { let n1 = max - min + 1; let l = (n1 as f64 + 1.0).log2().floor() as usize; let n2 = n1 + 1 - (1 << l); let mut nodes = HashSet::new(); let mut allowed_lens = HashMultiSet::new(); for i in 0..l { allowed_lens.insert(bit_size - i); } let n2_bits = uint2bits(n2, bit_size); for (i, bit) in n2_bits.into_iter().rev().enumerate() { if bit { allowed_lens.insert(bit_size - i); } } let mut min = min; while !allowed_lens.is_empty() { let next_node = get_canonical_next_max(min, max, bit_size, &allowed_lens); min = compute_max_uint(&next_node, bit_size) + 1; allowed_lens.remove(&next_node.len()); nodes.insert(next_node); } nodes } fn get_canonical_next_max( min: u64, max: u64, bit_size: usize, allowed_lens: &HashMultiSet<usize>, ) -> Vec<bool> { let mut bits_pattern = uint2bits(min, bit_size); let min_size_in_set = *allowed_lens.iter().min().unwrap(); while bits_pattern.len() >= 2 && (compute_min_uint(&bits_pattern[0..bits_pattern.len() - 1], bit_size) >= min) && (compute_max_uint(&bits_pattern[0..bits_pattern.len() - 1], bit_size) <= max) && (allowed_lens.contains(&(bits_pattern.len() - 1)) || bits_pattern.len() - 1 >= min_size_in_set) { bits_pattern.pop(); } bits_pattern } fn compute_min_uint(bits: &[bool], bit_size: usize) -> u64 { let mut min_bits = bits.to_vec(); min_bits.append(&mut vec![false; bit_size - bits.len()]); bits2uint(&min_bits) } In this way, we can effectively perform the range search without revealing information about the range other than its size. Reference Zhang, Y., Li, Y., & Wang, Y. (2019). Secure and efficient searchable public key encryption for resource constrained environment based on pairings under prime order group. Security and Communication Networks, 2019. Faber, S., Jarecki, S., Krawczyk, H., Nguyen, Q., Rosu, M., & Steiner, M. (2015, September). Rich queries on encrypted data: Beyond exact matches. In European symposium on research in computer security (pp. 123-145). Springer, Cham.","title":"How we implemented expressive search criteria with minimum effort."},{"location":"blog/pkse/#author-sora-suegami","text":"In this post, I describe how we implemented our new PKSE library . As described in its README.md, our library provides Public-key encryption with conjunctive and disjunctive keyword search (PECDK) [1] as an underlying scheme. The PECDK supports conjunction and disjunction of multiple keywords as search criteria, which is rather expressive in the research field of public-key searchable encryption (PKSE). However, to provide the same level of functionality as SQL, more complex search criteria need to be addressed. We filled this gap without implementing new PKSE schemes by devising how to construct the keywords to be encrypted in the PECDK scheme. Specifically, our library supports prefix and range search. The former encrypts a string and retrieves the encryption whose string has the specified prefix, and the latter encrypts an unsigned integer and retrieves the encryption whose integer is within the specified range. In the following, I explain those background designs and implementations.","title":"Author: Sora Suegami"},{"location":"blog/pkse/#prefix-search","text":"In the prefix search, a string is decomposed into bytes, and a pair of each byte and its index forms a single keyword. For example, a string \"abcde\" will be keywords [(0,\"a\"), (1, \"b\"), (2,\"c\"), (3,\"d\"), (4, \"e\")] . In our library, this keyword construction is implemented in Rust as below. 1 2 3 4 5 6 7 8 9 10 11 let mut keywords = bytes .into_iter() .enumerate() .map(|(idx, byte)| { concat_multi_bytes(vec![ region_name.as_bytes(), &idx.to_be_bytes(), &vec![1u8, *byte], ]) }) .collect::<Vec<Vec<u8>>>(); The variable idx and byte represent the index and the byte, respectively. The region_name is a fixed, application-specific string used to distinguish the same string encrypted for different applications. The byte 1 is also necessary to distinguish an empty keyword, namely all-zero bytes. The function concat_multi_bytes concats all of the given bytes. In this way, with minor exceptions, our implementation is consistent with the above description. The trapdoor for the prefix search is for a conjunction of keywords derived from a prefix string. For instance, the trapdoor for the prefix \"abc\" corresponds to the conjunction of keywords [(0,\"a\"), (1, \"b\"), (2,\"c\")] . Since the keywords of string with that prefix should include the same keywords, the trapdoor can match the appropriate string encryptions with the PECDK scheme.","title":"Prefix search"},{"location":"blog/pkse/#range-search","text":"The range search is more complex than the prefix search, but more interesting! Our first idea for the range search is to divide the entire range of integers into certain smaller ranges and encrypt the range containing the\u3000target integer as keyword. As an example, consider an integer \\(x\\) within the range \\([0, 50)\\) . We first divide that entire range into ranges of size 10, i.e., \\([0,10), [10,20), [20,30), [30,40), [40,50)\\) . The encryption of \\(x=15\\) will be the encryption of the keyword \\([10,20)\\) as \\(x \\in [10, 20)\\) holds. The trapdoor for the itenger within the range \\([10,30)\\) will correspond to a disjunction of keywords \\([10,20), [20,30)\\) . Although the above approach is easy to implement, it has two downsides. It cannot cover an exponentially-large range. It cannot generate a trapdoor for a range whose size is not a multiple of the size of the divided range (e.g., 10 in the above example). To overcome them, we adopt an approach proposed in [2]. In a nutshell, it constructs a binary tree corresponding to the entire range and encrypts a node of each height as a keyword. For example, for an 4-bit integer \\(x\\) , the following binary tree is considered. The encryption of \\(9=1001_2\\) will be for the keywords \\(((1, 1_2), (2, 10_2), (3, 100_2), (4, 1001_1))\\) . Notably, the number of keywords to be encrypted is only \\(t\\) for the exponentially-large range \\([0,2^t)\\) in this scheme! The trapdoor is generated for the disjunction of the nodes that cover all leafs within the specified range. In the above example, nodes \\((0101_2, 011_2, 10_2, 110_2)\\) covers all leafs within the range \\([0101_2, 1101_2]\\) , i.e., \\([5, 13]\\) . It implies that the integer within that range should have at least one of the nodes \\((0101_2, 011_2, 10_2, 110_2)\\) . Therefore, the disjunction of these nodes matches the appropriate integer encryption. Furthermore, there are no restrictions as in our initial idea regarding the position and size of the range to be specified. However, the minimum set of cover nodes is not sufficient to protect the privacy of search criteria because its size is not consistent for two different ranges with the same size. (E.g., the range \\([0,8]\\) has the same size with \\([5, 13]\\) , but its minimum set of cover nodes is just two nodes, namely \\((0_2, 1000_2)\\) !) The author of [2] solves this problem by considering a \"minimal universal cover [2]\", which is \"a cover with a number of nodes and depths that is the same for any two ranges of the same size [2]\". Such cover nodes leaks only the size of the specified range. Our implementation produces it following the procedures in Appendix A of [2], as below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 fn get_canonical_cover_nodes(min: u64, max: u64, bit_size: usize) -> HashSet<Vec<bool>> { let n1 = max - min + 1; let l = (n1 as f64 + 1.0).log2().floor() as usize; let n2 = n1 + 1 - (1 << l); let mut nodes = HashSet::new(); let mut allowed_lens = HashMultiSet::new(); for i in 0..l { allowed_lens.insert(bit_size - i); } let n2_bits = uint2bits(n2, bit_size); for (i, bit) in n2_bits.into_iter().rev().enumerate() { if bit { allowed_lens.insert(bit_size - i); } } let mut min = min; while !allowed_lens.is_empty() { let next_node = get_canonical_next_max(min, max, bit_size, &allowed_lens); min = compute_max_uint(&next_node, bit_size) + 1; allowed_lens.remove(&next_node.len()); nodes.insert(next_node); } nodes } fn get_canonical_next_max( min: u64, max: u64, bit_size: usize, allowed_lens: &HashMultiSet<usize>, ) -> Vec<bool> { let mut bits_pattern = uint2bits(min, bit_size); let min_size_in_set = *allowed_lens.iter().min().unwrap(); while bits_pattern.len() >= 2 && (compute_min_uint(&bits_pattern[0..bits_pattern.len() - 1], bit_size) >= min) && (compute_max_uint(&bits_pattern[0..bits_pattern.len() - 1], bit_size) <= max) && (allowed_lens.contains(&(bits_pattern.len() - 1)) || bits_pattern.len() - 1 >= min_size_in_set) { bits_pattern.pop(); } bits_pattern } fn compute_min_uint(bits: &[bool], bit_size: usize) -> u64 { let mut min_bits = bits.to_vec(); min_bits.append(&mut vec![false; bit_size - bits.len()]); bits2uint(&min_bits) } In this way, we can effectively perform the range search without revealing information about the range other than its size.","title":"Range search"},{"location":"blog/pkse/#reference","text":"Zhang, Y., Li, Y., & Wang, Y. (2019). Secure and efficient searchable public key encryption for resource constrained environment based on pairings under prime order group. Security and Communication Networks, 2019. Faber, S., Jarecki, S., Krawczyk, H., Nguyen, Q., Rosu, M., & Steiner, M. (2015, September). Rich queries on encrypted data: Beyond exact matches. In European symposium on research in computer security (pp. 123-145). Springer, Cham.","title":"Reference"},{"location":"db/apis/","text":"APIs detail. Sommelier DB APIs are constructed from, APIs derived from SQLite3. Sommelier DB Specific SQL function: test_cipher These are described at following sections. APIs derived from SQLite3 The SQLite3's API manual is here . When you want to process basic SQL queries, you should call the fucntions included this API. such as sqlite3_exec . At next section, it is explaining the APIs used in Sommelier Drive Server Database Subroutine . Commonly used API of SQLite3: sqlite3_exec If you execute SQL queries in C source code, you can use sqlite3_exec function . This function recieves not only char pointer stored a SQL query, but also a callback function, which is processing a SQL result line by line, and a void pointer, which can be accessed from callback function. So, we can define arbitary processing routine for SQL execution result row. Sommelier DB Specific SQL function: test_cipher When you search specific token with PKSE for the ciphertexts of SQL result, you call test_cipher SQL function in the SQL query. This SQL function recieves a ciphertext by PKSE and a trapdoor words, and it returns the integer 1 (This means searching result is True) or 0 (Result is False). For example as following SQL code block, you can call this function with SELECT statement, and you can get PKSE search results. 1 2 3 -- `Table` is defined as `Table (id INT, name TEXT, cipher TEXT)` SELECT id , name from Table where test_cipher ( cipher , trapdoor ) == 1 ;","title":"APIs"},{"location":"db/apis/#apis-detail","text":"Sommelier DB APIs are constructed from, APIs derived from SQLite3. Sommelier DB Specific SQL function: test_cipher These are described at following sections.","title":"APIs detail."},{"location":"db/apis/#apis-derived-from-sqlite3","text":"The SQLite3's API manual is here . When you want to process basic SQL queries, you should call the fucntions included this API. such as sqlite3_exec . At next section, it is explaining the APIs used in Sommelier Drive Server Database Subroutine .","title":"APIs derived from SQLite3"},{"location":"db/apis/#commonly-used-api-of-sqlite3-sqlite3_exec","text":"If you execute SQL queries in C source code, you can use sqlite3_exec function . This function recieves not only char pointer stored a SQL query, but also a callback function, which is processing a SQL result line by line, and a void pointer, which can be accessed from callback function. So, we can define arbitary processing routine for SQL execution result row.","title":"Commonly used API of SQLite3: sqlite3_exec"},{"location":"db/apis/#sommelier-db-specific-sql-function-test_cipher","text":"When you search specific token with PKSE for the ciphertexts of SQL result, you call test_cipher SQL function in the SQL query. This SQL function recieves a ciphertext by PKSE and a trapdoor words, and it returns the integer 1 (This means searching result is True) or 0 (Result is False). For example as following SQL code block, you can call this function with SELECT statement, and you can get PKSE search results. 1 2 3 -- `Table` is defined as `Table (id INT, name TEXT, cipher TEXT)` SELECT id , name from Table where test_cipher ( cipher , trapdoor ) == 1 ;","title":"Sommelier DB Specific SQL function: test_cipher"},{"location":"db/get_started/","text":"Install Sommelier DB The installing scripts of Sommelier DB is constructed by configure and make . Detail installing method is described at README of Sommelier DB . Use Sommelier DB CUI client When you execute your installed binary path, you can access the CLI SQLite Interface. In this interface, you can use SQLite's DBMS functions and Sommelier DB's original SQL function test_cipher . The test_cipher function's specification is described in APIs page. Use Sommelier DB C API Sommelier DB is based on SQLite3 C API source code . If you want to control Sommelier DB by source code of C, you can access Sommelier DB C API in the same way as SQLite3 C API. In particular, you should do the following tasks. Install Sommelier DB in the way descirbed above. Add #include \"#sommelier-db.h\" in your header file. (you will be able to use sqlite* interface and SQL function test_cipher , that is used searching data by PKSE) Add compile options: -I</path/to/sommelier-db/include> -L</path/to/sommelier-db/lib> -lsommelier-db . Sommelier Drive Server implementation is one of examples to use \"Sommelier DB C API\" and to add \"C compile options\".","title":"Get Started"},{"location":"db/get_started/#install-sommelier-db","text":"The installing scripts of Sommelier DB is constructed by configure and make . Detail installing method is described at README of Sommelier DB .","title":"Install Sommelier DB"},{"location":"db/get_started/#use-sommelier-db-cui-client","text":"When you execute your installed binary path, you can access the CLI SQLite Interface. In this interface, you can use SQLite's DBMS functions and Sommelier DB's original SQL function test_cipher . The test_cipher function's specification is described in APIs page.","title":"Use Sommelier DB CUI client"},{"location":"db/get_started/#use-sommelier-db-c-api","text":"Sommelier DB is based on SQLite3 C API source code . If you want to control Sommelier DB by source code of C, you can access Sommelier DB C API in the same way as SQLite3 C API. In particular, you should do the following tasks. Install Sommelier DB in the way descirbed above. Add #include \"#sommelier-db.h\" in your header file. (you will be able to use sqlite* interface and SQL function test_cipher , that is used searching data by PKSE) Add compile options: -I</path/to/sommelier-db/include> -L</path/to/sommelier-db/lib> -lsommelier-db . Sommelier Drive Server implementation is one of examples to use \"Sommelier DB C API\" and to add \"C compile options\".","title":"Use Sommelier DB C API"},{"location":"db/how_it_works/","text":"how to add original function like test_cipher In the SQLite3 implementations, it converts input SQL query into bytecode. And, SQLite3 executes compiled byteode on VDBE (Vertual DataBase Engine) , that is vertual machine manipulates table row data on B-Tree. By this vertual machine, the function calling query is processed as Function Opecode . There are a function sqlite3RegisterBuiltinFunction and a macro TEST_FUNC , which are used to define the Function Opecode (e.g. length, max, min...). To realize PKSE searching function, we defined the operation of test_cipher and called TEST_FUNC in sqlite3RegisterBuiltinFunction . Our test_cipher implementation is here .","title":"How it works"},{"location":"db/how_it_works/#how-to-add-original-function-like-test_cipher","text":"In the SQLite3 implementations, it converts input SQL query into bytecode. And, SQLite3 executes compiled byteode on VDBE (Vertual DataBase Engine) , that is vertual machine manipulates table row data on B-Tree. By this vertual machine, the function calling query is processed as Function Opecode . There are a function sqlite3RegisterBuiltinFunction and a macro TEST_FUNC , which are used to define the Function Opecode (e.g. length, max, min...). To realize PKSE searching function, we defined the operation of test_cipher and called TEST_FUNC in sqlite3RegisterBuiltinFunction . Our test_cipher implementation is here .","title":"how to add original function like test_cipher"},{"location":"db/intro/","text":"Today's databases lack security. Databases (DBs) play a significant role in today's Internet-based services. For example, online search services manage the data to be searched in a DB, which can be retrieved efficiently according to the user's request. However, the more data stored in a DB, the more serious the damage of data leakage if that DB is attacked. Notably, this is not a theoretical concern, but a real issue. In fact, it is estimated that popular Internet-based services, e.g., Yahoo, Facebook, and LinkedIn, have leaked over 100 million records [1]. From these cases, we believe that we need a solution that can protect the data confidentiality even if data is leaked from the DB . How public-key searchable encryption establishes both the convenience and security of databases. A primitive solution to the above problem is to encrypt all data in the DB so that its contents cannot be known by an adversary who attacks the DB. However, it would compromise the convenience of the DB because the server hosting the DB cannot search for the requested data. We establish both the convenience and security by encrypting the data by public-key searchable encryption (PKSE) . PKSE has the same features as standard public-key encryption schemes, e.g., RSA encryption scheme, except that the private key holder can allow a third party to test whether the encrypted data satisfies some search criteria, without revealing the data and the search criteria [2]. In more detail, a user who wishes to search for data first generates a pair of private and public keys. The public key is made available to a data provider who provides some data. The data provider encrypts the data with the user's public key and stores only the encryption on the DB server. The user then generates data corresponding to the user's search criteria, called trapdoor , and sends it to the DB server; the DB server can learn little information from the trapdoor. Since the DB server only receives the encryption and the trapdoor, it can protect the data confidentiality from an adversary who have access to all data in the DB, as well as from a malicious administrator of that server. Furthermore, the server can retrieve the encryption of the requested data using a test algorithm of the PKSE scheme. Formally, that algorithm takes as input encrypted data and a trapdoor and outputs 1 if the data satisfies the search criteria for the provided trapdoor and 0 otherwise . The server applies it to all candidate ciphertexts with the provided trapdoor and returns to the user only those for which it returns 1. In this way, the user can have the DB server search for apposite data as before. Sommelier DB: the world's first open source database based on public-key searchable encryption. Following the approach described above, we propose a new PKSE-based DB library, Sommelier DB. While the PKSE-based DB has been considered in various studies [2-5], as far as our knowledge there are no open source implementations other than ours. Sommelier DB is a fork of SQLite: it adds the following two functions: A new SQL function for the test algorithm of the PKSE scheme. C and Rust functions to generate a keyword encryption and a trapdoor of the PKSE scheme. These functions allow you to enjoy the benefits of PKSE without understanding how it works! Reference Todd, D. (2022, September). Top 10 Data Breaches of All Time, SecureWorld. https://www.secureworld.io/industry-news/top-10-data-breaches-of-all-time, (Accessed on 10/27/2022). Boneh, D., Crescenzo, G. D., Ostrovsky, R., & Persiano, G. (2004, May). Public key encryption with keyword search. In International conference on the theory and applications of cryptographic techniques (pp. 506-522). Springer, Berlin, Heidelberg. Matsuda, N., Hirano, T., Kawai, Y., Ito, T., Hattori, M., Yamanaka, T., & Nishigaki, M. (2020). Public-key Searchable Encryption with Index Generation for Shared Database. Journal of Information Processing, 28, 520-536. Wang, Z., Chen, B., Xiang, T., Zhou, L., Yan, H., & Li, J. (2021, November). Public Key Based Searchable Encryption with Fine-Grained Sender Permission Control. In International Conference on Provable Security (pp. 3-18). Springer, Cham. Prasanna, B. T., & Akki, C. B. (2015). A comparative study of homomorphic and searchable encryption schemes for cloud computing. arXiv preprint arXiv:1505.03263.","title":"Introduction"},{"location":"db/intro/#todays-databases-lack-security","text":"Databases (DBs) play a significant role in today's Internet-based services. For example, online search services manage the data to be searched in a DB, which can be retrieved efficiently according to the user's request. However, the more data stored in a DB, the more serious the damage of data leakage if that DB is attacked. Notably, this is not a theoretical concern, but a real issue. In fact, it is estimated that popular Internet-based services, e.g., Yahoo, Facebook, and LinkedIn, have leaked over 100 million records [1]. From these cases, we believe that we need a solution that can protect the data confidentiality even if data is leaked from the DB .","title":"Today's databases lack security."},{"location":"db/intro/#how-public-key-searchable-encryption-establishes-both-the-convenience-and-security-of-databases","text":"A primitive solution to the above problem is to encrypt all data in the DB so that its contents cannot be known by an adversary who attacks the DB. However, it would compromise the convenience of the DB because the server hosting the DB cannot search for the requested data. We establish both the convenience and security by encrypting the data by public-key searchable encryption (PKSE) . PKSE has the same features as standard public-key encryption schemes, e.g., RSA encryption scheme, except that the private key holder can allow a third party to test whether the encrypted data satisfies some search criteria, without revealing the data and the search criteria [2]. In more detail, a user who wishes to search for data first generates a pair of private and public keys. The public key is made available to a data provider who provides some data. The data provider encrypts the data with the user's public key and stores only the encryption on the DB server. The user then generates data corresponding to the user's search criteria, called trapdoor , and sends it to the DB server; the DB server can learn little information from the trapdoor. Since the DB server only receives the encryption and the trapdoor, it can protect the data confidentiality from an adversary who have access to all data in the DB, as well as from a malicious administrator of that server. Furthermore, the server can retrieve the encryption of the requested data using a test algorithm of the PKSE scheme. Formally, that algorithm takes as input encrypted data and a trapdoor and outputs 1 if the data satisfies the search criteria for the provided trapdoor and 0 otherwise . The server applies it to all candidate ciphertexts with the provided trapdoor and returns to the user only those for which it returns 1. In this way, the user can have the DB server search for apposite data as before.","title":"How public-key searchable encryption establishes both the convenience and security of databases."},{"location":"db/intro/#sommelier-db-the-worlds-first-open-source-database-based-on-public-key-searchable-encryption","text":"Following the approach described above, we propose a new PKSE-based DB library, Sommelier DB. While the PKSE-based DB has been considered in various studies [2-5], as far as our knowledge there are no open source implementations other than ours. Sommelier DB is a fork of SQLite: it adds the following two functions: A new SQL function for the test algorithm of the PKSE scheme. C and Rust functions to generate a keyword encryption and a trapdoor of the PKSE scheme. These functions allow you to enjoy the benefits of PKSE without understanding how it works!","title":"Sommelier DB: the world's first open source database based on public-key searchable encryption."},{"location":"db/intro/#reference","text":"Todd, D. (2022, September). Top 10 Data Breaches of All Time, SecureWorld. https://www.secureworld.io/industry-news/top-10-data-breaches-of-all-time, (Accessed on 10/27/2022). Boneh, D., Crescenzo, G. D., Ostrovsky, R., & Persiano, G. (2004, May). Public key encryption with keyword search. In International conference on the theory and applications of cryptographic techniques (pp. 506-522). Springer, Berlin, Heidelberg. Matsuda, N., Hirano, T., Kawai, Y., Ito, T., Hattori, M., Yamanaka, T., & Nishigaki, M. (2020). Public-key Searchable Encryption with Index Generation for Shared Database. Journal of Information Processing, 28, 520-536. Wang, Z., Chen, B., Xiang, T., Zhou, L., Yan, H., & Li, J. (2021, November). Public Key Based Searchable Encryption with Fine-Grained Sender Permission Control. In International Conference on Provable Security (pp. 3-18). Springer, Cham. Prasanna, B. T., & Akki, C. B. (2015). A comparative study of homomorphic and searchable encryption schemes for cloud computing. arXiv preprint arXiv:1505.03263.","title":"Reference"},{"location":"drive/get_started/","text":"Requirements To run the server, the following tools are required: Sommelier-DB jasson (json library) To run the client, the following tools are required: rustc 1.65.0-nightly cargo 1.65.0-nightly cbindgen 0.24.3 Setup We open the first terminal for running the server and clone the server repository. 1 2 3 git clone https://github.com/Sommelier-db/sommelier-drive-server cd sommelier-drive-server git submodule update --init --recursive The sommelier-drive-server is built as below: 1 2 make init make We then open the second terminal for running the client CLI and clone the client repository. 1 2 3 git clone https://github.com/Sommelier-db/sommelier-drive-client cd sommelier-drive-client git submodule update --init --recursive The sommelier-drive-client is built by simply executing the build.sh . 1 ./build.sh Operate files with Sommelier Drive! Now, let's operate files with Sommelier Drive! You will notice that the UX of Sommelier Drive is almost the same as existing Unix file systems, which you probably use every day. On the first terminal, we run the server. 1 build/main If there is no issue, the server will stand at the URL http://localhost:8000/api . On the second terminal, we manage the files on that server. While performing the following operations, also look at the first terminal running the server. You can find that no file path or contents appear on the server side! We first create a new user account and creates an initial directory /data1 under the root directory. 1 >> register /data1 We then create a file and a directory under the /data1 . 1 2 >> touch /data1/hello.txt >> mkdir /data1/subdata1 Say hello to Sommelier Drive in the /data1/hello.txt ! 1 2 3 >> cat /data1/hello.txt >> modify /data1/hello.txt Hello,SommelierDrive! >> cat /data1/hello.txt We can check the children files or directories under the /data1 . 1 >> ls /data1 We finally create a file in a deeper location and find them. 1 2 >> touch /data1/subdata1/goodbye.c >> find /data1","title":"Get Started"},{"location":"drive/get_started/#requirements","text":"To run the server, the following tools are required: Sommelier-DB jasson (json library) To run the client, the following tools are required: rustc 1.65.0-nightly cargo 1.65.0-nightly cbindgen 0.24.3","title":"Requirements"},{"location":"drive/get_started/#setup","text":"We open the first terminal for running the server and clone the server repository. 1 2 3 git clone https://github.com/Sommelier-db/sommelier-drive-server cd sommelier-drive-server git submodule update --init --recursive The sommelier-drive-server is built as below: 1 2 make init make We then open the second terminal for running the client CLI and clone the client repository. 1 2 3 git clone https://github.com/Sommelier-db/sommelier-drive-client cd sommelier-drive-client git submodule update --init --recursive The sommelier-drive-client is built by simply executing the build.sh . 1 ./build.sh","title":"Setup"},{"location":"drive/get_started/#operate-files-with-sommelier-drive","text":"Now, let's operate files with Sommelier Drive! You will notice that the UX of Sommelier Drive is almost the same as existing Unix file systems, which you probably use every day. On the first terminal, we run the server. 1 build/main If there is no issue, the server will stand at the URL http://localhost:8000/api . On the second terminal, we manage the files on that server. While performing the following operations, also look at the first terminal running the server. You can find that no file path or contents appear on the server side! We first create a new user account and creates an initial directory /data1 under the root directory. 1 >> register /data1 We then create a file and a directory under the /data1 . 1 2 >> touch /data1/hello.txt >> mkdir /data1/subdata1 Say hello to Sommelier Drive in the /data1/hello.txt ! 1 2 3 >> cat /data1/hello.txt >> modify /data1/hello.txt Hello,SommelierDrive! >> cat /data1/hello.txt We can check the children files or directories under the /data1 . 1 >> ls /data1 We finally create a file in a deeper location and find them. 1 2 >> touch /data1/subdata1/goodbye.c >> find /data1","title":"Operate files with Sommelier Drive!"},{"location":"drive/intro/","text":"Storing files on a remote server without revealing what files exist and where they are located. As the first application of Sommelier DB, we developed a new remote file system, Sommelier Drive. Like existing services, such as Dropbox, Google Drive, and One Drive, files can be stored on a remote server, but the file contents and their file paths are all encrypted. Therefore, even a malicious administrator of that server cannot know what files exist and where they are located . In a nutshell, a data provider who creates a new file, a user who has read permission to that file, and the remote server work as below. The data provider encrypts the file contents and paths with the user's public key and stores their encryptions on the remote server. The user generates a trapdoor of the PKSE scheme with the user's private key and provides it for the remote server. The remote server returns the file contents encryption of which the corresponding file path encryption matches the provided trapdoor. The user decrypts the returned encryption with the user's private key, which results in the file contents. The above scheme may seem almost the same as the Sommelier DB. The difference is that the user's private and public keys consist of those of PKSE and public-key encryption (PKE). The PKSE scheme is used to allow the server to search for files in the requested file path without revealing them. In addition, the PKE scheme is necessary to obtain the file contents because only with the PKSE scheme the user cannot obtain the unknown message from the ciphertext, even if the PKSE private key is available. In other words, Sommelier Drive requires the PKSE and PKE scheme to test and recover the file path and contents, respectively.","title":"Introduction"},{"location":"drive/intro/#storing-files-on-a-remote-server-without-revealing-what-files-exist-and-where-they-are-located","text":"As the first application of Sommelier DB, we developed a new remote file system, Sommelier Drive. Like existing services, such as Dropbox, Google Drive, and One Drive, files can be stored on a remote server, but the file contents and their file paths are all encrypted. Therefore, even a malicious administrator of that server cannot know what files exist and where they are located . In a nutshell, a data provider who creates a new file, a user who has read permission to that file, and the remote server work as below. The data provider encrypts the file contents and paths with the user's public key and stores their encryptions on the remote server. The user generates a trapdoor of the PKSE scheme with the user's private key and provides it for the remote server. The remote server returns the file contents encryption of which the corresponding file path encryption matches the provided trapdoor. The user decrypts the returned encryption with the user's private key, which results in the file contents. The above scheme may seem almost the same as the Sommelier DB. The difference is that the user's private and public keys consist of those of PKSE and public-key encryption (PKE). The PKSE scheme is used to allow the server to search for files in the requested file path without revealing them. In addition, the PKE scheme is necessary to obtain the file contents because only with the PKSE scheme the user cannot obtain the unknown message from the ciphertext, even if the PKSE private key is available. In other words, Sommelier Drive requires the PKSE and PKE scheme to test and recover the file path and contents, respectively.","title":"Storing files on a remote server without revealing what files exist and where they are located."},{"location":"drive/apis/client_apis/","text":"Our client implementation currently provides the following CLI commands. CLI Commands register initDirPath Create a new user account and the user's initial directory under the root directory. Inputs: initDirPath : A file path of the initial directory. Example: register /data1 Note: Before running the following commands, you must create a user account with this command! touch filePath Create a new file with an empty contents. Inputs: filePath : A file path. Example: touch /data1/test.txt mkdir dirPath Create a new directory. Inputs: dirPath : A directory path. Example: mkdir /data1/subdata cat filePath Retrieve a text in the file located in the given file path. Inputs: filePath : A file path. Example: cat /data1/test.txt modify filePath text Modify the file contents located in the given file path with the given text. Inputs: filePath : A file path of the file to be modified. text : A text written in the file. Example: modify /data1/test.txt Hello! ls dirPath Retrieve a childlen file paths under the given file path. Inputs: dirPath : A directory path. Example: ls /data1 find dirPath Retrieve a descendent file paths under the given file path. Inputs: dirPath : A directory path. Example: find /data1 exit Exit the CLI.","title":"Client APIs"},{"location":"drive/apis/client_apis/#cli-commands","text":"","title":"CLI Commands"},{"location":"drive/apis/client_apis/#register-initdirpath","text":"Create a new user account and the user's initial directory under the root directory. Inputs: initDirPath : A file path of the initial directory. Example: register /data1 Note: Before running the following commands, you must create a user account with this command!","title":"register initDirPath"},{"location":"drive/apis/client_apis/#touch-filepath","text":"Create a new file with an empty contents. Inputs: filePath : A file path. Example: touch /data1/test.txt","title":"touch filePath"},{"location":"drive/apis/client_apis/#mkdir-dirpath","text":"Create a new directory. Inputs: dirPath : A directory path. Example: mkdir /data1/subdata","title":"mkdir dirPath"},{"location":"drive/apis/client_apis/#cat-filepath","text":"Retrieve a text in the file located in the given file path. Inputs: filePath : A file path. Example: cat /data1/test.txt","title":"cat filePath"},{"location":"drive/apis/client_apis/#modify-filepath-text","text":"Modify the file contents located in the given file path with the given text. Inputs: filePath : A file path of the file to be modified. text : A text written in the file. Example: modify /data1/test.txt Hello!","title":"modify filePath text"},{"location":"drive/apis/client_apis/#ls-dirpath","text":"Retrieve a childlen file paths under the given file path. Inputs: dirPath : A directory path. Example: ls /data1","title":"ls dirPath"},{"location":"drive/apis/client_apis/#find-dirpath","text":"Retrieve a descendent file paths under the given file path. Inputs: dirPath : A directory path. Example: find /data1","title":"find dirPath"},{"location":"drive/apis/client_apis/#exit","text":"Exit the CLI.","title":"exit"},{"location":"drive/apis/server_apis/","text":"A server of the Sommelier Drive provides the following REST APIs. REST APIs GET /user Returns a record in the User table where a value of the UserID column is userId . Request: 1 2 3 { \"userId\": Int } Response: 1 2 3 4 5 6 { \"userId\": Int, \"dataPK\": String, \"keywordPK\": String, \"nonce\": Int } POST /user Takes as input public keys and file path encryptions of the PKE and PKSE schemes, inserts them in the User table and Path table, and returns a new userId . Request: 1 2 3 4 5 6 { \"dataPK\": String, \"keywordPK\": String, \"dataCT\": String, \"keywordCT\": String, } Response: Int GET /file-path Returns a record in the Path table where a value of the PathID column is pathId . Request: 1 2 3 { \"pathId\": Int } Response: 1 2 3 4 5 6 7 { \"pathId\": Int, \"userId\": Int, \"permissionHash\": String, \"dataCT\": String, \"keywordCT\": String } GET /file-path/children Returns a list of records in the Path table where a value of the PermissionHash column is equal to the permissionHash . Request: 1 2 3 { \"permissionHash\": String } Response: 1 2 3 4 5 6 7 8 9 10 [ { \"pathId\": Int, \"userId\": Int, \"permissionHash\": String, \"dataCT\": String, \"keywordCT\": String }, ... ] GET /file-path/search Takes as input a userId and a trapdoor td and returns records in the Path table where a value of the UserID column is userId and a ciphertext ct of the KeywordCT column satisfies test_cipher(ct,td)==1 . Request: 1 2 3 4 { \"userId\": Int, \"trapdoor\": String } Response: 1 2 3 4 5 6 7 8 9 10 [ { \"pathId\": Int, \"userId\": Int, \"permissionHash\": String, \"dataCT\": String, \"keywordCT\": String }, ... ] POST /file-path Takes as input readUserId , premissionHash , dataCT , and keywordCT , inserts them into the Path table, and returns a new pathId . Request: 1 2 3 4 5 6 { \"readUserId\": Int, \"premissionHash\": String, \"dataCT\": String, \"keywordCT\": String, } Response: Int GET /shared-key Returns a record in the Shared Key table where a value of the PathID column is pathId . Request: 1 2 3 { \"pathId\": Int } Response: 1 2 3 4 5 { \"sharedKeyId\": Int, \"pathId\": Int, \"ct\": String } POST /shared-key Takes as input pathId and ct , inserts them into the Shared key table, and returns a new sharedKeyId . Request: 1 2 3 4 { \"pathId\": Int, \"ct\": String } Response: Int GET /contents Returns a record in the Contents table where a value of the SharedKeyHash column is equal to the sharedKeyHash . Request: 1 2 3 { \"sharedKeyHash\": String } Response: 1 2 3 4 5 6 7 { \"contentsId\": Int, \"sharedKeyHash\": String, //\u201dauthorizationPK\u201d: String, \"nonce\": Int \"ct\": String } POST /contents Takes as input sharedKeyHash and ct , inserts them into the Contents table, and returns a new contentsId . Request: 1 2 3 4 { \"sharedKeyHash\": String, \"ct\": String } Response: Int PUT /contents Takes as input sharedKeyHash and ct , modifies a value of the ContentsCT column in the record where a value of the SharedKeyHash column is equal to the sharedKeyHash . Request: 1 2 3 4 { \"sharedKeyHash\": String, \"ct\": String } Response: Int","title":"Server REST APIs"},{"location":"drive/apis/server_apis/#rest-apis","text":"GET /user Returns a record in the User table where a value of the UserID column is userId . Request: 1 2 3 { \"userId\": Int } Response: 1 2 3 4 5 6 { \"userId\": Int, \"dataPK\": String, \"keywordPK\": String, \"nonce\": Int } POST /user Takes as input public keys and file path encryptions of the PKE and PKSE schemes, inserts them in the User table and Path table, and returns a new userId . Request: 1 2 3 4 5 6 { \"dataPK\": String, \"keywordPK\": String, \"dataCT\": String, \"keywordCT\": String, } Response: Int GET /file-path Returns a record in the Path table where a value of the PathID column is pathId . Request: 1 2 3 { \"pathId\": Int } Response: 1 2 3 4 5 6 7 { \"pathId\": Int, \"userId\": Int, \"permissionHash\": String, \"dataCT\": String, \"keywordCT\": String } GET /file-path/children Returns a list of records in the Path table where a value of the PermissionHash column is equal to the permissionHash . Request: 1 2 3 { \"permissionHash\": String } Response: 1 2 3 4 5 6 7 8 9 10 [ { \"pathId\": Int, \"userId\": Int, \"permissionHash\": String, \"dataCT\": String, \"keywordCT\": String }, ... ] GET /file-path/search Takes as input a userId and a trapdoor td and returns records in the Path table where a value of the UserID column is userId and a ciphertext ct of the KeywordCT column satisfies test_cipher(ct,td)==1 . Request: 1 2 3 4 { \"userId\": Int, \"trapdoor\": String } Response: 1 2 3 4 5 6 7 8 9 10 [ { \"pathId\": Int, \"userId\": Int, \"permissionHash\": String, \"dataCT\": String, \"keywordCT\": String }, ... ] POST /file-path Takes as input readUserId , premissionHash , dataCT , and keywordCT , inserts them into the Path table, and returns a new pathId . Request: 1 2 3 4 5 6 { \"readUserId\": Int, \"premissionHash\": String, \"dataCT\": String, \"keywordCT\": String, } Response: Int GET /shared-key Returns a record in the Shared Key table where a value of the PathID column is pathId . Request: 1 2 3 { \"pathId\": Int } Response: 1 2 3 4 5 { \"sharedKeyId\": Int, \"pathId\": Int, \"ct\": String } POST /shared-key Takes as input pathId and ct , inserts them into the Shared key table, and returns a new sharedKeyId . Request: 1 2 3 4 { \"pathId\": Int, \"ct\": String } Response: Int GET /contents Returns a record in the Contents table where a value of the SharedKeyHash column is equal to the sharedKeyHash . Request: 1 2 3 { \"sharedKeyHash\": String } Response: 1 2 3 4 5 6 7 { \"contentsId\": Int, \"sharedKeyHash\": String, //\u201dauthorizationPK\u201d: String, \"nonce\": Int \"ct\": String } POST /contents Takes as input sharedKeyHash and ct , inserts them into the Contents table, and returns a new contentsId . Request: 1 2 3 4 { \"sharedKeyHash\": String, \"ct\": String } Response: Int PUT /contents Takes as input sharedKeyHash and ct , modifies a value of the ContentsCT column in the record where a value of the SharedKeyHash column is equal to the sharedKeyHash . Request: 1 2 3 4 { \"sharedKeyHash\": String, \"ct\": String } Response: Int","title":"REST APIs"},{"location":"drive/how_it_works/client_spec/","text":"A client of Sommelier Drive can manage files on the remote server in a similar manner to Unix file systems. It performs each operation in the background as below. User registration A client generates new pairs of private and public keys of the PKE and PKSE schemes, dataPK and keywordPK . The client decides a name of the initial directory initDir and encrypts its file path /'initDir' with the dataPK and keywordPK , which results in the PKE and PKSE ciphertexts dataCT and keywordCT . The client posts the dataPK , keywordPK , dataCT , and keywordCT to a remote server. The remote server inserts the provided data into the User table and makes a new userId . The remote server also inserts the provided ciphertexts and userId into the Path table, where a permissionHash is derived from userId and a root file path / by the remote server. The remote server returns userId to the client. The client derives permissionHash from the returned userId and / and requests the records in the Path table where a value of PermissionHash column is equal to permissionHash . The remote server returns the requested record in the Path table, which includes the id of the file path pathId . The client generates a fresh shared key sharedKey and encrypts it with dataPK , which results in the shared key encryption sharedKeyCT . The client posts the pathId and sharedKeyCT to the remote server. The remote server inserts the provided pathId and sharedKeyCT into the Shared key table. The client constructs a bit string called contentsData as the following table: The client encrypts the contentsData with the sharedKey , which results in contentsCT . The client computes the hash value sharedKeyHash and posts contentsCT and sharedKeyHash to the remote server. The remote server inserts the provided contentsCT and sharedKeyHash into the Contents table. Field Name Bit Size Description isFile 1 1 for a file, 0 for a directory. numReadableUsers 64 A big-endian integer of the number of users with read permission. readableUserPathIds 64 * numReadableUsers A vector of pathId s corresponding to this contents. fileBytes variable A byte string of the contents of the file for a file, an empty byte string for a directory. File retrieve (cat) A client with the userId will retrieve the contents of the file located in the filePath as below. The client derives a permissionHash from the userId and the parent directory file path Parent(filePath) and requests the records in the Path table where a value of PermissionHash column is equal to permissionHash . The remote server returns the requested records in the Path table. For each returned record, the client decrypts its dataCT and find the pathId whose corresponding file path is equal to the filePath . The client requests the record in the Shared key table where a value of the PathID column is equal to pathId . The remote server returns the requested record in the Shared key table. The client recovers the sharedKey from the sharedKeyCT in the returned record. The client requests the record in the Contents table where a value of the SharedKeyHash column is equal to sharedKeyHash derived from sharedKey . The remote server returns the requested record in the Contents table. The client decrypts the contentsCT in the returned record with the sharedKey , which results in the desired contentsData . Children file paths retrieve (ls) A client with the userId will retrieve the children file paths under the filePath as below. The client derives a permissionHash from the userId and the filePath and requests the records in the Path table where a value of PermissionHash column is equal to permissionHash . The remote server returns the requested records in the Path table. For each returned record, the client decrypts its dataCT . These recovered file paths are the children file paths under the filePath . Descendant file paths retrieve (find) A client with the userId will retrieve the descendant file paths under the filePath as below. The client generates a trapdoor with the PKSE private key for strings with filePath as prefix and requests the records in the Path table where a value of KeywordCT column matches the trapdoor. The remote server returns the requested records in the Path table. For each returned record, the client decrypts its dataCT . These recovered file paths are the descendant file paths under the filePath . File creation (touch) A client with the userId will locate a new file whose contents bytes are bytes in the filePath . The client retrieves the contentsData located in Parent(filePath) in the same way as the file/directory retrieve process . The client parse the contentsData as (isFile, numReadableUsers, readableUserPathIds, fileBytes) . The client generates a fresh shared key sharedKey and derives its hash sharedKeyHash . For each pathId in the readableUserPathIds , the client and the remote server performs the following process: The client requests the records in the Path table where a value of PathID column is equal to the pathId . The remote server returns the requested record in the Path table. The client retrieves the usedId from the returned record and requests the records in the User table where a value of UserID column is equal to the userId . The remote server returns the requested record in the User table. The client retrieves the dataPK and keywordPK from the returned record and encrypts the filePath with these keys, which results in the dataCT and keywordCT , respectively. The client also derives the permissionHash from the userId and the Parent(filePath) and posts the userId , permissionHash , dataCT , and keywordCT to the remote server. The remote server inserts the provided data into the Path table and returns a new pathId . The client encrypts the sharedKey with the dataPK , which results in the sharedKeyCT . The client posts the pathId and sharedKeyCT to the remote server. The remote server inserts the provided data into the Shared key table. The client constructs a new contentsData as the following table and encrypts it with the sharedKey , which results in the contentsCT . The client posts the sharedKeyHash and contentsCT to the remote server. The remote server inserts the provided data into the Contents table. Field Name Bit Size Value isFile 1 1 numReadableUsers 64 numReadableUsers in Step 2. readableUserPathIds 64 * numReadableUsers readableUserPathIds in Step 2. fileBytes variable bytes Directory creation (mkdir) A client with the userId will locate a new directory in the filePath . The client retrieves the contentsData located in Parent(filePath) in the same way as the file/directory retrieve process . The client parse the contentsData as (isFile, numReadableUsers, readableUserPathIds, fileBytes) . The client generates a fresh shared key sharedKey and derives its hash sharedKeyHash . For each pathId in the readableUserPathIds , the client and the remote server performs the following process: The client requests the records in the Path table where a value of PathID column is equal to the pathId . The remote server returns the requested record in the Path table. The client retrieves the usedId from the returned record and requests the records in the User table where a value of UserID column is equal to the userId . The remote server returns the requested record in the User table. The client retrieves the dataPK and keywordPK from the returned record and encrypts the filePath with these keys, which results in the dataCT and keywordCT , respectively. The client also derives the permissionHash from the userId and the Parent(filePath) and posts the userId , permissionHash , dataCT , and keywordCT to the remote server. The remote server inserts the provided data into the Path table and returns a new pathId . The client encrypts the sharedKey with the dataPK , which results in the sharedKeyCT . The client posts the pathId and sharedKeyCT to the remote server. The remote server inserts the provided data into the Shared key table. The client constructs a new contentsData as the following table and encrypts it with the sharedKey , which results in the contentsCT . The client posts the sharedKeyHash and contentsCT to the remote server. The remote server inserts the provided data into the Contents table. Field Name Bit Size Value isFile 1 0 numReadableUsers 64 numReadableUsers in Step 2. readableUserPathIds 64 * numReadableUsers readableUserPathIds in Step 2. fileBytes variable Empty bytes File Modification A client with the userId will modify a file located in the filePath with the bytes newBytes . The client retrieves the contentsData and sharedKey of the file located in filePath in the same way as the file/directory retrieve process . The client parse the contentsData as (isFile, numReadableUsers, readableUserPathIds, fileBytes) . The client constructs a new contentsData as the following table and encrypts it with the sharedKey , which results in the contentsCT . The client posts the sharedKeyHash and contentsCT to the remote server. The remote server inserts the provided data into the Contents table. Field Name Bit Size Value isFile 1 1 numReadableUsers 64 numReadableUsers in Step 2. readableUserPathIds 64 * numReadableUsers readableUserPathIds in Step 2. fileBytes variable newBytes Note that the other operations, e.g., file deletion, are not supported in the current implementation .","title":"Client Specification"},{"location":"drive/how_it_works/client_spec/#user-registration","text":"A client generates new pairs of private and public keys of the PKE and PKSE schemes, dataPK and keywordPK . The client decides a name of the initial directory initDir and encrypts its file path /'initDir' with the dataPK and keywordPK , which results in the PKE and PKSE ciphertexts dataCT and keywordCT . The client posts the dataPK , keywordPK , dataCT , and keywordCT to a remote server. The remote server inserts the provided data into the User table and makes a new userId . The remote server also inserts the provided ciphertexts and userId into the Path table, where a permissionHash is derived from userId and a root file path / by the remote server. The remote server returns userId to the client. The client derives permissionHash from the returned userId and / and requests the records in the Path table where a value of PermissionHash column is equal to permissionHash . The remote server returns the requested record in the Path table, which includes the id of the file path pathId . The client generates a fresh shared key sharedKey and encrypts it with dataPK , which results in the shared key encryption sharedKeyCT . The client posts the pathId and sharedKeyCT to the remote server. The remote server inserts the provided pathId and sharedKeyCT into the Shared key table. The client constructs a bit string called contentsData as the following table: The client encrypts the contentsData with the sharedKey , which results in contentsCT . The client computes the hash value sharedKeyHash and posts contentsCT and sharedKeyHash to the remote server. The remote server inserts the provided contentsCT and sharedKeyHash into the Contents table. Field Name Bit Size Description isFile 1 1 for a file, 0 for a directory. numReadableUsers 64 A big-endian integer of the number of users with read permission. readableUserPathIds 64 * numReadableUsers A vector of pathId s corresponding to this contents. fileBytes variable A byte string of the contents of the file for a file, an empty byte string for a directory.","title":"User registration"},{"location":"drive/how_it_works/client_spec/#file-retrieve-cat","text":"A client with the userId will retrieve the contents of the file located in the filePath as below. The client derives a permissionHash from the userId and the parent directory file path Parent(filePath) and requests the records in the Path table where a value of PermissionHash column is equal to permissionHash . The remote server returns the requested records in the Path table. For each returned record, the client decrypts its dataCT and find the pathId whose corresponding file path is equal to the filePath . The client requests the record in the Shared key table where a value of the PathID column is equal to pathId . The remote server returns the requested record in the Shared key table. The client recovers the sharedKey from the sharedKeyCT in the returned record. The client requests the record in the Contents table where a value of the SharedKeyHash column is equal to sharedKeyHash derived from sharedKey . The remote server returns the requested record in the Contents table. The client decrypts the contentsCT in the returned record with the sharedKey , which results in the desired contentsData .","title":"File retrieve (cat)"},{"location":"drive/how_it_works/client_spec/#children-file-paths-retrieve-ls","text":"A client with the userId will retrieve the children file paths under the filePath as below. The client derives a permissionHash from the userId and the filePath and requests the records in the Path table where a value of PermissionHash column is equal to permissionHash . The remote server returns the requested records in the Path table. For each returned record, the client decrypts its dataCT . These recovered file paths are the children file paths under the filePath .","title":"Children file paths retrieve (ls)"},{"location":"drive/how_it_works/client_spec/#descendant-file-paths-retrieve-find","text":"A client with the userId will retrieve the descendant file paths under the filePath as below. The client generates a trapdoor with the PKSE private key for strings with filePath as prefix and requests the records in the Path table where a value of KeywordCT column matches the trapdoor. The remote server returns the requested records in the Path table. For each returned record, the client decrypts its dataCT . These recovered file paths are the descendant file paths under the filePath .","title":"Descendant file paths retrieve (find)"},{"location":"drive/how_it_works/client_spec/#file-creation-touch","text":"A client with the userId will locate a new file whose contents bytes are bytes in the filePath . The client retrieves the contentsData located in Parent(filePath) in the same way as the file/directory retrieve process . The client parse the contentsData as (isFile, numReadableUsers, readableUserPathIds, fileBytes) . The client generates a fresh shared key sharedKey and derives its hash sharedKeyHash . For each pathId in the readableUserPathIds , the client and the remote server performs the following process: The client requests the records in the Path table where a value of PathID column is equal to the pathId . The remote server returns the requested record in the Path table. The client retrieves the usedId from the returned record and requests the records in the User table where a value of UserID column is equal to the userId . The remote server returns the requested record in the User table. The client retrieves the dataPK and keywordPK from the returned record and encrypts the filePath with these keys, which results in the dataCT and keywordCT , respectively. The client also derives the permissionHash from the userId and the Parent(filePath) and posts the userId , permissionHash , dataCT , and keywordCT to the remote server. The remote server inserts the provided data into the Path table and returns a new pathId . The client encrypts the sharedKey with the dataPK , which results in the sharedKeyCT . The client posts the pathId and sharedKeyCT to the remote server. The remote server inserts the provided data into the Shared key table. The client constructs a new contentsData as the following table and encrypts it with the sharedKey , which results in the contentsCT . The client posts the sharedKeyHash and contentsCT to the remote server. The remote server inserts the provided data into the Contents table. Field Name Bit Size Value isFile 1 1 numReadableUsers 64 numReadableUsers in Step 2. readableUserPathIds 64 * numReadableUsers readableUserPathIds in Step 2. fileBytes variable bytes","title":"File creation (touch)"},{"location":"drive/how_it_works/client_spec/#directory-creation-mkdir","text":"A client with the userId will locate a new directory in the filePath . The client retrieves the contentsData located in Parent(filePath) in the same way as the file/directory retrieve process . The client parse the contentsData as (isFile, numReadableUsers, readableUserPathIds, fileBytes) . The client generates a fresh shared key sharedKey and derives its hash sharedKeyHash . For each pathId in the readableUserPathIds , the client and the remote server performs the following process: The client requests the records in the Path table where a value of PathID column is equal to the pathId . The remote server returns the requested record in the Path table. The client retrieves the usedId from the returned record and requests the records in the User table where a value of UserID column is equal to the userId . The remote server returns the requested record in the User table. The client retrieves the dataPK and keywordPK from the returned record and encrypts the filePath with these keys, which results in the dataCT and keywordCT , respectively. The client also derives the permissionHash from the userId and the Parent(filePath) and posts the userId , permissionHash , dataCT , and keywordCT to the remote server. The remote server inserts the provided data into the Path table and returns a new pathId . The client encrypts the sharedKey with the dataPK , which results in the sharedKeyCT . The client posts the pathId and sharedKeyCT to the remote server. The remote server inserts the provided data into the Shared key table. The client constructs a new contentsData as the following table and encrypts it with the sharedKey , which results in the contentsCT . The client posts the sharedKeyHash and contentsCT to the remote server. The remote server inserts the provided data into the Contents table. Field Name Bit Size Value isFile 1 0 numReadableUsers 64 numReadableUsers in Step 2. readableUserPathIds 64 * numReadableUsers readableUserPathIds in Step 2. fileBytes variable Empty bytes","title":"Directory creation (mkdir)"},{"location":"drive/how_it_works/client_spec/#file-modification","text":"A client with the userId will modify a file located in the filePath with the bytes newBytes . The client retrieves the contentsData and sharedKey of the file located in filePath in the same way as the file/directory retrieve process . The client parse the contentsData as (isFile, numReadableUsers, readableUserPathIds, fileBytes) . The client constructs a new contentsData as the following table and encrypts it with the sharedKey , which results in the contentsCT . The client posts the sharedKeyHash and contentsCT to the remote server. The remote server inserts the provided data into the Contents table. Field Name Bit Size Value isFile 1 1 numReadableUsers 64 numReadableUsers in Step 2. readableUserPathIds 64 * numReadableUsers readableUserPathIds in Step 2. fileBytes variable newBytes Note that the other operations, e.g., file deletion, are not supported in the current implementation .","title":"File Modification"},{"location":"drive/how_it_works/concepts/","text":"Here, we describe new concepts of Sommelier Drive and how they optimize the processes of the data provider and the remote server. Permission hash for the optimization of the ls operation. First, we introduce a permission hash. This is a hash value calculated from the ID of a legitimate user having read permission and the file path of the parent directory. The data provider, in addition to the file path encryption, stores the permission hash on the remote server. When the user wishes to perform the ls operation, that is to say, retrieve the children file paths of a directory, the user provides the remote server with the permission hash corresponding to that directory file path instead of the trapdoor. The remote server returns the file path encryptions whose corresponding permission hash is equal to the provided one. In this way, the permission hash can optimize the ls operation on the remote server. The attentive reader may think that the permission hash helps the malicious server administrator learn information about the file path. In fact, it reveals only information about sibling files and directories, i.e., those contained in the same parent directory . This is because the administrator cannot learn the actual file paths from their permission hash or encryptions but can specify the siblings by comparing the permission hashes. Shared key for the optimization of encrypting a file for multiple users. A shared key is just a secret key of symmetric key encryption (SKE), e.g., AES. It improves the efficiency when multiple users have read permission for the same file. In more detail, the file contents are encrypted with a fresh shared key, and the shared key is encrypted with each user's PKE public key. The legitimate user can obtain the file contents by (1) recovering the shared key with the PKE private key and (2) decrypting the SKE ciphertexts with the shared key. To analyze the efficiency, we compare the ciphertext size in the above scheme with that of the case where the file contents are directly encrypted with each user's PKE public key. Let \\(N, d, k\\) be the number of the legitimate users, the file contents size, and the shared key size. In the former case, the ciphertext size grows in the order \\(\\mathcal{O}(kN)\\) , whereas the order of the latter case is \\(\\mathcal{O}(dN)\\) . Therefore, our scheme is more efficient when \\(d\\) is sufficiently large.","title":"New Concepts"},{"location":"drive/how_it_works/concepts/#permission-hash-for-the-optimization-of-the-ls-operation","text":"First, we introduce a permission hash. This is a hash value calculated from the ID of a legitimate user having read permission and the file path of the parent directory. The data provider, in addition to the file path encryption, stores the permission hash on the remote server. When the user wishes to perform the ls operation, that is to say, retrieve the children file paths of a directory, the user provides the remote server with the permission hash corresponding to that directory file path instead of the trapdoor. The remote server returns the file path encryptions whose corresponding permission hash is equal to the provided one. In this way, the permission hash can optimize the ls operation on the remote server. The attentive reader may think that the permission hash helps the malicious server administrator learn information about the file path. In fact, it reveals only information about sibling files and directories, i.e., those contained in the same parent directory . This is because the administrator cannot learn the actual file paths from their permission hash or encryptions but can specify the siblings by comparing the permission hashes.","title":"Permission hash for the optimization of the ls operation."},{"location":"drive/how_it_works/concepts/#shared-key-for-the-optimization-of-encrypting-a-file-for-multiple-users","text":"A shared key is just a secret key of symmetric key encryption (SKE), e.g., AES. It improves the efficiency when multiple users have read permission for the same file. In more detail, the file contents are encrypted with a fresh shared key, and the shared key is encrypted with each user's PKE public key. The legitimate user can obtain the file contents by (1) recovering the shared key with the PKE private key and (2) decrypting the SKE ciphertexts with the shared key. To analyze the efficiency, we compare the ciphertext size in the above scheme with that of the case where the file contents are directly encrypted with each user's PKE public key. Let \\(N, d, k\\) be the number of the legitimate users, the file contents size, and the shared key size. In the former case, the ciphertext size grows in the order \\(\\mathcal{O}(kN)\\) , whereas the order of the latter case is \\(\\mathcal{O}(dN)\\) . Therefore, our scheme is more efficient when \\(d\\) is sufficiently large.","title":"Shared key for the optimization of encrypting a file for multiple users."},{"location":"drive/how_it_works/server_spec/","text":"A remote server in Sommelier Drive stores file information in Sommelier DB. That is, it creates DB tables as below. User table User table stores the id of a user and the user's PKE and PKSE public keys. They are denoted by userId , dataPK , and keywordPK , respectively, in the following description. UserID DataPK KeywordPK Int Text Text Path table Path table stores information about the file path. Each record in this table corresponds to a pair of the userId and the file path, filePath . Its columns describe the property of the file or directory located in the filePath as below. PathID UserID PermissionHash DataCT KeywordCT Int Int Text Text Text UserID: A userId of the user who has read permission to the file or directory located in the filePath . PermissionHash: A permissionHash derived from the userId and Parent(filePath) , which represents a parent directory path of the filePath . DataCT: A ciphertext of the filePath encrypted with the dataPK corresponding to the userId . KeywordCT: A ciphertext of the filePath encrypted with the keywordPK corresponding to the userId . Shared key table Shared Key table stores a pathId and a shared key encryption, sharedKeyCT . The sharedKeyCT is required to recover the file contents located in the filePath of the pathId . SharedKeyID PathID SharedKeyCT Int Int Text Contents table Contents table stores a file contents encryption, contentsCT . Each record corresponds to a sharedKeyHash , which is a hash value of the shared key. Therefore, users who hold the same shared key can access the same record. ContentsID SharedKeyHash ContentsCT Int Text Text","title":"Server Specification"},{"location":"drive/how_it_works/server_spec/#user-table","text":"User table stores the id of a user and the user's PKE and PKSE public keys. They are denoted by userId , dataPK , and keywordPK , respectively, in the following description. UserID DataPK KeywordPK Int Text Text","title":"User table"},{"location":"drive/how_it_works/server_spec/#path-table","text":"Path table stores information about the file path. Each record in this table corresponds to a pair of the userId and the file path, filePath . Its columns describe the property of the file or directory located in the filePath as below. PathID UserID PermissionHash DataCT KeywordCT Int Int Text Text Text UserID: A userId of the user who has read permission to the file or directory located in the filePath . PermissionHash: A permissionHash derived from the userId and Parent(filePath) , which represents a parent directory path of the filePath . DataCT: A ciphertext of the filePath encrypted with the dataPK corresponding to the userId . KeywordCT: A ciphertext of the filePath encrypted with the keywordPK corresponding to the userId .","title":"Path table"},{"location":"drive/how_it_works/server_spec/#shared-key-table","text":"Shared Key table stores a pathId and a shared key encryption, sharedKeyCT . The sharedKeyCT is required to recover the file contents located in the filePath of the pathId . SharedKeyID PathID SharedKeyCT Int Int Text","title":"Shared key table"},{"location":"drive/how_it_works/server_spec/#contents-table","text":"Contents table stores a file contents encryption, contentsCT . Each record corresponds to a sharedKeyHash , which is a hash value of the shared key. Therefore, users who hold the same shared key can access the same record. ContentsID SharedKeyHash ContentsCT Int Text Text","title":"Contents table"}]}